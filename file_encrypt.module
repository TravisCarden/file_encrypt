<?php
use Drupal\Core\Entity\EntityInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\file_encrypt\EncryptStreamWrapper;
use Drupal\file_encrypt\Hooks\FieldStorageConfigEditFormAlter;

/**
 * Implements hook_form_field_storage_config_edit_form_alter().
 */
function file_encrypt_form_field_storage_config_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  (new FieldStorageConfigEditFormAlter(\Drupal::service('plugin.manager.field.field_type'), \Drupal::service('encrypt.encryption_profile.manager')))
    ->alterForm($form, $form_state);
}

/**
 * Implements hook_field_config_presave().
 */
function file_encrypt_field_config_presave(FieldConfigInterface $field_config) {
  // Add the encryption profile to the destination directory, so the stream
  // wrapper gets the encryption profile passed along.
  /** @var \Drupal\field\FieldStorageConfigInterface $field_storage_config */
  $field_storage_config = $field_config->getFieldStorageDefinition();
  if ($field_storage_config->getSetting('uri_scheme') === EncryptStreamWrapper::SCHEME) {
    $encryption_profile = $field_storage_config->getThirdPartySetting('file_encrypt', 'encryption_profile');
    // Ensure that destination directory starts with the encryption profile.
    $file_directory = $field_config->getSetting('file_directory');
    if (strpos($file_directory, $encryption_profile . '/') !== 0) {
      $field_config->setSetting('file_directory', $encryption_profile . '/' . $file_directory);
    }
  }
}
